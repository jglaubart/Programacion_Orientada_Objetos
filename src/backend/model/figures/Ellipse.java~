package backend.model.figures;

import backend.model.Properties.DrawProperties;
import backend.model.builders.FigureBuilder;
import backend.model.interfaces.Drawer;
import backend.model.FiguresPair;

public class Ellipse extends Figure {

    protected double axisX, axisY;

    @Override
    public String toString() {
        return String.format("Elipse [Centro: %s, DMayor: %.2f, DMenor: %.2f]", getCenterPoint(), axisX, axisY);
    }

    public double getWidth() {
        return axisX;
    }

    public double getHeight() {
        return axisY;
    }

    @Override
    public boolean belongs(Point eventPoint) {
        return ((Math.pow(eventPoint.getX() - this.getCenterPoint().getX(), 2) / Math.pow(this.getWidth(), 2)) +
                (Math.pow(eventPoint.getY() - this.getCenterPoint().getY(), 2) / Math.pow(this.getHeight(), 2))) <= 0.30;
    }
    @Override
    public void draw(Drawer drawer) {
        super.draw(drawer);
        drawer.drawEllipse(this.getCenterPoint(), this.getWidth(), this.getHeight());
    }

    @Override
    public void fillGradient(Drawer drawer) {
        DrawProperties properties = this.getDrawProperties();
        drawer.fillRadialGradient(properties.getColor1(), properties.getColor2());
    }

    @Override
    public FiguresPair<Figure, Figure> divide() {
        double newWidth = getWidth() / 2;
        double newHeight = getHeight() / 2;
        Point leftCenter = new Point(getCenterPoint().getX() - newWidth, getCenterPoint().getY());
        Point rightCenter = new Point(getCenterPoint().getX() + newWidth, getCenterPoint().getY());
        return null;//lo termino despu√©s
    }
}